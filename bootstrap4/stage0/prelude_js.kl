-- Built-in structs, enum, and traits

enum Option<T>:
    None
    Some(T)
end

use Option::*

impl Option<T>:
    fn is_none(self) Bool:
        match self:
            None => true
            Some(_) => false
        end
    end

    fn is_some(self) Bool:
        match self:
            None => false
            Some(_) => true
        end
    end

    fn unwrap(self) T:
        match self:
            None => panic("called `Option::unwrap()` on a `None` value")
            Some(value) => value
        end
    end

    fn unwrap_or(self, def T) T:
        match self:
            None => def
            Some(value) => value
        end
    end

    fn unwrap_or_error<E impl ToStr>(self, error E) T throws E:
        match self:
            None => Error(error)
            Some(value) => Ok(value)
        end
    end
end

-- todo (lang-feat): We should be able to implemnt `ToStr` for `Option<T impl ToStr>`.
impl ToStr for Option<T>:
    fn to_str(self) Str:
        match self:
            None => "None"
            Some(_) => f"Some(...)"
        end
    end
end

trait ToStr:
    fn to_str(self) Str
end

struct StrFormatter:
    width Int?
    radix Int?

    -- todo (lang-feat): Make this private.
    out Str
end

impl ToStr for StrFormatter:
    fn to_str(self) Str => self.out
end

impl StrFormatter:
    fn new() StrFormatter => StrFormatter { width: None, radix: None, out: "" }

    fn write_str(mut self, s Str) Self:
        self.out.push(s)
        self
    end

    fn write_fmt(mut self, s Str) Self:
        --- Write the given string respecting the width settings.
        ---
        self.out.push(s)
        self
    end
end

trait ToFormattedStr:
    fn to_formatted_str(self, fmt StrFormatter) throws
end

trait Add:
    fn add(self, rhs Self) Self
end

trait Sub:
    fn sub(self, rhs Self) Self
end

trait Mul:
    fn mul(self, rhs Self) Self
end

trait Div:
    fn div(self, rhs Self) Self
    fn modulo(self, rhs Self) Self
end

trait PartialEq:
    fn eq(self, rhs Self) Bool
    fn ne(self, rhs Self) Bool => not self.eq(rhs)
end

-- This is just a marker trait. `PartialEq` must be implemented.
trait Eq:
end

trait PartialOrd:
    fn lt(self, rhs Self) Bool
    fn le(self, rhs Self) Bool
    fn gt(self, rhs Self) Bool
    fn ge(self, rhs Self) Bool
end

-- This is just a marker trait. `PartialOrd` must be implemented.
trait Ord:
end

trait IndexedGet<K, V>:
    fn get(self, key K) V
end

trait IndexedSet<K, V>:
    fn set(mut self, key K, value V)
end

trait Iterator<T>:
    fn next(self) Option<T>

    fn for_each(self, f (fn(T))):
        loop:
            match self.next():
                None => break
                Some(value) => f(value)
            end
        end
    end

    fn filter(self, f (fn(T) Bool)) Iterator<T>:
        let vec = Vector<T>::new()
        self.for_each(fn(value) => if f(value) => vec.push(value))
        vec.iter()
    end

    fn map<U>(self, f (fn(T) U)) Iterator<U>:
        let vec = Vector<U>::new()
        self.for_each(fn(value) => vec.push(f(value)))
        vec.iter()
    end

    fn fold<U>(self, init U, f (fn(U, T) U)) U:
        mut acc = init
        loop:
            match self.next():
                None => break
                Some(value) => acc = f(acc, value)
            end
        end
        acc
    end

    fn collect(self) Vector<T>:
        let vec = Vector<T>::new()
        self.for_each(fn(value) => vec.push(value))
        vec
    end

    fn reverse(self) Iterator<T>:
        self.collect().reverse_copy().iter()
    end
    
    fn count(self) Int:
        mut count = 0
        loop:
            match self.next():
                None => break
                Some(_) => count = count + 1
            end
        end
        count
    end

    fn take_while(self, f (fn(T) Bool)) Iterator<T>:
        mut vec = Vector<T>::new()
        loop:
            match self.next():
                None => break
                Some(value):
                    if f(value) => vec.push(value)
                    else => break
                end
            end
        end
        vec.iter()
    end

    fn take(self, n Int) Iterator<T>:
        Take<T> { iter: self, n }
    end

    fn skip_while(self, f (fn(T) Bool)) Iterator<T>:
        --- Skip elements until the predicate returns false.
        ---
        mut iter = PeekableIterator::new(self)
        loop:
            match iter.peek():
                None => break
                Some(value):
                    if not f(value) => break
                    iter.next()
                end
            end
        end
        iter
    end

    fn skip(self, n Int) Iterator<T>:
        mut i = 0
        loop:
            if i >= n => break
            match self.next():
                None => break
                Some(_) => i = i + 1
            end
        end
        self
    end

    fn find_index(self, f (fn(T) Bool)) Int?:
        mut i = 0
        loop:
            match self.next():
                None => return None
                Some(value) => if f(value) => return Some(i)
            end
            i = i + 1
        end
        -- todo (lang-feat): The flow analysis should be able to detect that this is unreachable.
        None
    end

    fn find(self, f (fn(T) Bool)) Option<T>:
        loop:
            match self.next():
                None => return None
                Some(value) => if f(value) => return Some(value)
            end
        end
        -- todo (lang-feat): The flow analysis should be able to detect that this is unreachable.
        return None
    end

    fn find_map<U>(self, f (fn(T) Option<U>)) Option<U>:
        loop:
            match self.next():
                None => return None
                Some(value) =>
                    match f(value):
                        None => continue
                        Some(result) => return Some(result)
                    end
            end
        end
        -- todo (lang-feat): The flow analysis should be able to detect that this is unreachable.
        return None
    end

    fn any(self, predicate (fn(T) Bool)) Bool:
        match self.find_index(predicate):
            None => false
            Some(_) => true
        end
    end
end

struct Take<T>:
    iter Iterator<T>
    n Int
end

impl Iterator<T> for Take<T>:
    fn next(mut self) Option<T>:
        if self.n <= 0:
            return None
        end
        self.n = self.n - 1
        self.iter.next()
    end
end

struct PeekableIterator<T>:
    iter Iterator<T>
    peeked T?
    pos Int
end

impl PeekableIterator<T>:
    fn new(iter Iterator<T>) Self => PeekableIterator<T> { iter, peeked: None, pos: -1 }

    fn peek(mut self) Option<T>:
        if self.peeked.is_some():
            return self.peeked
        end
        self.peeked = self.iter.next()
        self.peeked 
    end

    fn is_last(self) Bool:
        self.peek().is_none()
    end

    fn is_first(self) Bool:
        self.pos == 0
    end
end

impl Iterator<T> for PeekableIterator<T>:
    fn next(mut self) Option<T>:
        self.pos = self.pos + 1
        if self.peeked.is_some():
            let value = self.peeked.unwrap()
            self.peeked = None
            return Some(value)
        end
        self.iter.next()
    end
end

trait Len:
    fn len(self) Int
end

enum Result<T, E impl ToStr=Str>:
    Ok(T)
    Error(E)
end

use Result::*

impl Result<T, E>:
    fn is_ok(self) Bool:
        match self:
            Ok(_) => true
            Error(_) => false
        end
    end

    fn is_error(self) Bool:
        match self:
            Ok(_) => false
            Error(_) => true
        end
    end

    fn unwrap(self) T:
        match self:
            Ok(value) => value
            Error(error) => panic(f"called `Result.unwrap()` on an `Error` value: {error}")
        end
    end

    fn unwrap_error(self) E:
        match self:
            Ok(value) => panic(f"called `Result.unwrap_err()` on an `Ok` value")
            Error(error) => error
        end
    end

    fn as_option(self) Option<T>:
        match self:
            Ok(value) => Some(value)
            Error(_) => None
        end
    end
end

impl ToStr for Result<T, E>:
    fn to_str(self) Str:
        match self:
            Ok(value) => f"ok: {value}"
            Error(error) => f"error: {error}"
        end
    end
end

-- Fixed size array

struct Array<T>:
    data JSArray<T>
end

impl Array<T>:
    fn new(size Int) Array<T> => Array<T> { data: JSArray<T>::new(size) }
    fn iter(self) ArrayIter<T> => ArrayIter<T> { arr: self, index: 0 }
end

impl Len for Array<T>:
    fn len(self) Int => self.data.len()
end

impl IndexedGet<Int, T> for Array<T>:
    fn get(self, i Int) T:
        if i >= self.len():
            panic("Array index out of bounds")
        end
        self.data.get(i)
    end
end

impl IndexedSet<Int, T> for Array<T>:
    fn set(mut self, i Int, v T):
        if i >= self.len():
            panic("Array index out of bounds")
        end
        self.data.set(i, v)
    end
end

struct ArrayIter<T>:
    arr Array<T>
    index Int
end

impl Iterator<T> for ArrayIter<T>:
    fn next(mut self) Option<T>:
        if self.index >= self.arr.len():
            return None
        end
        let value = self.arr.get(self.index)
        self.index = self.index + 1
        Some(value)
    end
end

struct Frame:
    file Str
    line Int
    col Int
    src Str
end

impl ToStr for Frame:
    fn to_str(self) Str:
        f"{self.file}:{self.line}:{self.col}\n    {self.src}"
    end
end

struct Trace:
    frames Array<Frame>
end

impl ToStr for Trace:
    fn to_str(self) Str:
        let frames = self.frames.iter().map<Str>(fn(frame Frame) Str => frame.to_str())
        "\n\n".join(frames)
    end
end

extern:
    fn print(s ToStr)
    fn panic(s Str)
    fn exit(code Int)
    fn assert(cond Bool)
    fn register_panic_handler(handler (fn(Str, Str, Str))) (fn(Str, Str, Str))
    fn stack_trace() Trace

    -- todo: We should not need this function. We use it to work around
    --       the fact that Klar does not support global variables.
    fn int_next() Int

    impl Len for Str
    impl IndexedGet<Int, Char> for Str
    impl Str:
        fn push(mut self, s Str) Str
        fn push_char(mut self, c Char) Str
        fn slice_copy(self, from Int, to Int) Str
        fn join(self, iter Iterator<Str>) Str
    end

    impl Char:
        fn from_int(i Int) Char throws
        fn to_int(self) Int
    end

    -- JS array helpers.
    struct JSArray<T>:
    end

    impl JSArray<T>:
        fn new(size Int) Self
        fn len(self) Int
        fn push(mut self, s T) 
        fn pop(mut self)
        fn get(self, i Int) T
        fn set(mut self, i Int, v T)
    end

    -- File IO.
    struct File:
        path Str
    end

    impl File:
        fn at(path Str) Self

        fn cwd() Self

        --- Open the file and read its contests as a string.
            Close the file in any case.
        ---
        fn read_str(self) Str throws 

        --- Open the file and write the given string to it.
            Close the file in any case.
        ---
        fn write_str(mut self, data Str) throws 
    end

    fn ext_args() JSArray<Str>
    fn ext_env() JSArray<(Str, Str)>

    impl Result<T, E>:
        fn error_return_trace(self) Trace
        --- Return a trace of all the code locations where the error was propagated.

            Returns an empty array if the result is `Ok`.
        ---
    end
end

impl Str:
    fn repeat(self, n Int) Str:
        mut s = ""
        mut i = 0
        loop:
            if i >= n => break
            s.push(self)
            i = i + 1
        end
        s
    end

    fn replace(self, from Str, to Str) Str:
        mut s = ""
        mut i = 0
        mut cur_match = ""
        loop:
            if i >= self.len() => break
            let c = self[i]
            if c == from[cur_match.len()]:
                cur_match.push_char(c)
                if cur_match == from:
                    s.push(to)
                    cur_match = ""
                end
            end else:
                s.push(cur_match)
                s.push_char(c)
                cur_match = ""
            end
            i = i + 1
        end
        s
    end

    fn reverse(self) Str:
        mut s = ""
        mut i = self.len() - 1
        loop:
            if i < 0 => break
            s.push_char(self[i])
            i = i - 1
        end
        s
    end

    fn split(self, sep Char) Iterator<Str>:
        let vec = Vector<Str>::new()
        mut iter = self.iter()
        mut s = ""
        loop:
            match iter.next():
                None => break
                Some(c):
                    if c == sep:
                        vec.push(s)
                        s = ""
                    end else => s.push_char(c)
                end
            end
        end
        if s.len() > 0 => vec.push(s)
        vec.iter()
    end

    fn starts_with(self, prefix Str) Bool:
        if self.len() < prefix.len() => return false
        mut i = 0
        loop:
            if i == prefix.len() => break
            if self[i] != prefix[i] => return false
            i = i + 1
        end
        true
    end

    fn ends_with(self, suffix Str) Bool:
        if self.len() < suffix.len() => return false
        mut i = self.len() - suffix.len()
        mut j = 0
        loop:
            if i == self.len() => break
            if self[i] != suffix[j] => return false
            i = i + 1
            j = j + 1
        end
        true
    end

    fn contains(self, s Str) Bool:
        mut i = 0
        mut match_ = ""
        loop:
            if i == self.len() => break
            let c = self[i]
            if c == s[match_.len()]:
                match_.push_char(c)
                if match_ == s:
                    return true
                end
            end else:
                match_ = ""
            end
            i = i + 1
        end
        false
    end

    fn contains_char(self, c Char) Bool:
        -- todo (lang-feat): Using `self.iter().any(fn(ch) => ch == c)` 
        --                   should produce the same code and be as fast 
        --                   as the current implementation.
        mut i = 0
        loop:
            if i == self.len() => break
            if self[i] == c => return true
            i = i + 1
        end
        return false
    end

    fn when(self, condition Bool) Str:
        --- Returns `self` if the condition is met, otherwise an empty string.
            This is useful in f-strings to insert a space only if a condition is met.
        ---
        if condition => self else => ""
    end

    fn iter(self) Iterator<Char>:
        StrIterator { str: self, pos: 0, end_pos: self.len(), inc: 1 }
    end

    fn dedent(self) Str:
        --- Remove leading spaces from each line so that the lines with the least
            number of leading spaces have none.
        ---
        mut min_indent = 10000000
        self.split('\n').for_each(fn(line Str):
            let indent = line.iter().take_while(fn(c Char) Bool => c == ' ').count()
            if indent != line.len() and indent < min_indent 
                => min_indent = indent
            end
        )
        let result = self.split('\n').map<Str>(fn(line Str) Str => line.slice_copy(min_indent, line.len()))
        "\n".join(result)
    end

    fn indent(self, width Int) Str:
        --- Indent each line with the number of spaces given by `width`.
        ---
        "\n".join(self.split('\n').map<Str>(fn(line Str) Str => " ".repeat(width) + line))
    end

    fn trim_end(self) Str:
        mut i = self.len()
        loop:
            if i == 0 => break
            if self[i - 1] != ' ' and self[i - 1] != '\n' => break
            i = i - 1
        end
        self.slice_copy(0, i)
    end

    fn trim_start(self) Str:
        mut i = 0
        loop:
            if i == self.len() => break
            if self[i] != ' ' and self[i] != '\n' => break
            i = i + 1
        end
        self.slice_copy(i, self.len())
    end

    fn trim(self) Str:
        if self.len() == 0 => return ""
        self.trim_start().trim_end()
    end

    fn pad_left(self, width Int, fill Char) Str:
        if self.len() >= width => return self
        let fill_str = f"{fill}".repeat(width - self.len())
        fill_str + self
    end

    fn copy(self) Str:
        "" + self
    end
end

struct StrIterator:
    str Str
    pos Int
    end_pos Int
    inc Int
end

impl StrIterator:
    fn reverse(mut self) StrIterator:
        StrIterator { str: self.str, pos: self.pos, end_pos: -1, inc: -1 }
    end

    fn is_last(self) Bool:
        self.pos == self.end_pos
    end
end

impl Iterator<Char> for StrIterator:
    fn next(mut self) Option<Char>:
        if self.pos == self.end_pos:
            return None
        end
        let c = self.str[self.pos]
        self.pos = self.pos + self.inc
        Some(c)
    end
end

impl Add for Str:
    fn add(self, rhs Str) Str:
        mut res = ""
        res.push(self)
        res.push(rhs)
        res
    end
end

impl Int:
    fn from_str(s Str, radix Int) Int throws:
        if s.len() == 0 => return Error("empty string")
        if radix < 2 or radix > 16 => return Error("radix must be in between 2 and 16")
        let digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']
        let is_negative = s[0] == '-'
        mut value = 0
        mut i = if is_negative => 1 else => 0
        loop:
            if i >= s.len() => break
            value = value * radix
            mut j = 0
            loop:
                if j >= digits.len() => return Error(f"invalid digit: {s[i]}")
                if digits[j] == s[i] => break
                j = j + 1
            end
            value = value + j
            -- todo (lang-feat): We should be able to write `value > 2147483648`. This is not 
            --                   possible in stage1 because it only knows about the `Int` type.
            --                   We should also be able to write `value > Int::MAX`.
            if not is_negative and value > 2147483647 => return Error(f"literal out of range for Int: {s}")
            if is_negative and value > 2147483647 => return Error(f"literal out of range for Int: {s}")
            i = i + 1
        end
        -- todo (lang-feat): We should be able to write `-value`.
        if s[0] == '-' => -1 * value else => value
    end
end

impl ToFormattedStr for Int:
    fn to_formatted_str(self, fmt StrFormatter) throws:
        let radix = fmt.radix.unwrap_or(10)
        if radix < 2 or radix > 16 => return Error("radix must be in between 2 and 16")
        let width = fmt.width.unwrap_or(0)
        mut i Int = self
        mut s = ""
        if i < 0:
            s.push_char('-')
            i = 0-i
        end
        let digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']
        loop:
            if i == 0 => break
            let digit = i % radix
            s.push_char(digits[digit])
            i = i / radix
        end
        s = s.reverse().pad_left(width, '0')
        fmt.write_str(s)
        return ()
    end
end

-- Vector

struct Vector<T>:
    data JSArray<T>
end

impl Vector<T>:
    fn new() Vector<T> => Vector<T> { data: JSArray<T>::new(0) }

    fn from(arr Array<T>) Vector<T>:
        let vec = Vector<T>::new()
        mut i = 0
        loop:
            if i >= arr.len():
                break
            end
            let v = arr.get(i)
            vec.push(v)
            i = i + 1
        end
        vec
    end

    fn push(mut self, s T):
        self.data.push(s)
    end

    fn push_all(mut self, iter Iterator<T>):
        iter.for_each(fn(value) => self.push(value))
    end

    fn pop(mut self) Option<T>:
        if self.len() == 0 => return None
        let value = self.data.get(self.len() - 1)
        self.data.pop()
        Some(value)
    end

    fn shift(mut self) Option<T>:
        if self.len() == 0 => return None
        let value = self.data.get(0)
        mut idx = 1
        loop:
            if idx == self.len() => break
            self.data.set(idx - 1, self.data.get(idx))
            idx = idx + 1
        end
        self.data.pop()
        Some(value)
    end

    fn reverse_copy(self) Vector<T>:
        let vec = Vector<T>::new()
        mut i = self.len() - 1
        loop:
            if i < 0 => break
            vec.push(self[i])
            i = i - 1
        end
        vec
    end

    fn iter(self) VectorIter<T> => VectorIter<T> { vec: self, index: 0 }

    fn slice_copy(self, from Int, to Int) Vector<T>:
        let vec = Vector<T>::new()
        mut i = from
        loop:
            if i >= to => break
            vec.push(self[i])
            i = i + 1
        end
        vec
    end

    fn contains(self, value T) Bool:
        self.iter().any(fn(v) => v == value)
    end
end

impl Len for Vector<T>:
    fn len(self) Int => self.data.len()
end

impl PartialEq for Vector<T>:
    fn eq(self, rhs Vector<T>) Bool:
        if self.len() != rhs.len() => return false
        mut i = 0
        loop:
            if i >= self.len() => break
            if self[i] != rhs[i] => return false
            i = i + 1
        end
        true
    end
end

impl IndexedGet<Int, T> for Vector<T>:
    fn get(self, i Int) T:
        if i >= self.len():
            panic(f"Vector index out of bounds: {i} >= {self.len()}")
        end
        self.data.get(i)
    end
end

impl IndexedSet<Int, T> for Vector<T>:
    fn set(mut self, i Int, v T):
        if i >= self.len():
            panic(f"Vector index out of bounds: {i} >= {self.len()}")
        end
        self.data.set(i, v)
    end
end

impl Add for Vector<T>:
    fn add(self, rhs Vector<T>) Vector<T>:
        let vec = Vector<T>::new()
        self.iter().for_each(fn(value) => vec.push(value))
        rhs.iter().for_each(fn(value) => vec.push(value))
        vec
    end
end

struct VectorIter<T>:
    vec Vector<T>
    index Int
end

impl VectorIter<T>:
    fn new(vec Vector<T>) VectorIter<T>:
        VectorIter<T> { vec, index: 0 }
    end

    fn reverse(self) Iterator<T>:
        ReverseVectorIter<T>{ vec: self.vec, index: self.vec.len() - self.index }
    end
end

impl Iterator<T> for VectorIter<T>:
    fn next(mut self) Option<T>:
        if self.index >= self.vec.len():
            return None
        end
        let value = self.vec.get(self.index)
        self.index = self.index + 1
        Some(value)
    end
end

struct ReverseVectorIter<T>:
    vec Vector<T>
    index Int
end

impl ReverseVectorIter<T>:
    fn new(vec Vector<T>) ReverseVectorIter<T>:
        ReverseVectorIter<T> { vec, index: vec.len() - 1 }
    end

    fn reverse(self) Iterator<T>:
        VectorIter<T> { vec: self.vec, index: self.vec.len() - self.index }
    end
end

impl Iterator<T> for ReverseVectorIter<T>:
    fn next(mut self) Option<T>:
        if self.index < 0:
            return None
        end
        let value = self.vec.get(self.index)
        self.index = self.index - 1
        Some(value)
    end
end

-- Map

struct Map<K, V>:
    data Vector<(K, V)>
end

impl Map<K, V>:
    fn new() Map<K, V> => Map<K, V> { data: Vector<(K, V)>::new() }

    fn keys(self) Iterator<K>:
        -- todo (lang feat): This should be just 
        --                   `self.data.iter().map(fn(pair) => pair.0)`
        --                   but the stage0 type-checker cannot handle it.
        mut vec = Vector<K>::new()
        mut i = 0
        loop:
            if i >= self.data.len():
                break
            end
            let v = self.data.get(i)
            vec.push(v.0)
            i = i + 1
        end
        vec.iter()
    end

    -- todo (lang feat): The stage0 type-checker cannot resolve the types of the tuple.
    -- fn iter(self) Iterator<(K,V)> => self.data.iter()

    -- todo (lang feat): This function is only there because the stage0 type-checker does
    --                   type the `get` function correctly. 
    fn get_or_panic(self, key K) V:
        mut i = 0
        loop:
            if i >= self.data.len():
                break
            end
            let v = self.data.get(i)
            if v.0 == key:
                return v.1
            end
            i = i + 1
        end
        panic(f"key not found: {key}")
    end

    fn remove(mut self, key K):
        mut i = 0
        loop:
            if i >= self.data.len():
                break
            end
            let v = self.data.get(i)
            if v.0 == key:
                self.data = self.data.slice_copy(0, i).add(self.data.slice_copy(i + 1, self.data.len()))
                return ()
            end
            i = i + 1
        end
    end
end

impl IndexedGet<K, Option<V>> for Map<K, V>:
    fn get(self, key K) Option<V>:
        mut i = 0
        loop:
            if i >= self.data.len():
                break
            end
            let v = self.data.get(i)
            if v.0 == key:
                return Some<V>(v.1)
            end
            i = i + 1
        end
        None
    end
end

impl IndexedSet<K, V> for Map<K, V>:
    fn set(mut self, key K, value V):
        mut i = 0
        loop:
            if i >= self.data.len():
                break
            end
            let v = self.data.get(i)
            if v.0 == key:
                self.data.set(i, (key, value))
                return ()
            end
            i = i + 1
        end
        self.data.push((key, value))
    end
end

impl Len for Map<K, V>:
    fn len(self) Int => self.data.len()
end

struct Env:
end

impl Env:
    fn args() Vector<Str>:
        mut i = 0
        let src = ext_args()
        mut args = Vector<Str>::new()
        loop:
            if i == src.len():
                break
            end
            let arg = src.get(i)
            args.push(arg)
            i = i + 1
        end
        args
    end
end
