-- No function overloading.
fn fun(a Int) Int

fn fun(a i64) Int -- Error: function 'fun' already defined

-- Implementing traits for different types.
trait Into<T>:
    fn into(self) T
end

struct A:
end

impl Into<Int> for A:
    fn into(self) Int:
        1
    end
end

impl Into<i64> for A:
    fn into(self) i64:
        2
    end
end

fn main() Int:
    let a = A()
    a.into() -- Error: ambiguous call to function 'into'
    a.into<Int>() -- Ok: 1
    a.into<i64>() -- Ok: 2
    0
end


-- Type checking generic structs.

struct A<T>:
    a Int
    b T
end

impl A<U>:
    fn new(a Int, b U) A<U>:
    end

    fn to_str(self) string:
    end
end

let a = A<Int>(1, 2)

---

- match U to A (because they are the first type parameter each)
- parse new(a Int, b U) A<U> as new(a Int, b A<T>) A<T>

- instantiate a as ConcreteType("A", [Int])
---

