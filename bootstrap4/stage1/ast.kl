use .lexer::Span
use .lexer::Token

trait ToDebugStr:
    --- Convert the item to a string representation that does retain
        all information, but is easier to test / reason about.
    ---
    fn to_debug_str(self) Str

    fn to_debug_str_multiline(self) Str:
        --- Same as `to_debug_str`, but with newlines and indentation.
        ---
        let str = self.to_debug_str()
        mut res = StrBuilder::new()
        mut indent = 0
        mut iter = str.iter()
        loop:
            match iter.next():
                Some('('):
                    if res.len() > 0 => res.push("\n")
                    res.push("  ".repeat(indent))
                    res.push("(")
                    indent = indent + 1
                end
                Some(')'):
                    indent = indent - 1
                    res.push(")")
                end
                Some(x) => res.push_char(x)
                None => break
            end
        end
        res.to_str()
    end
end

enum ParseErrorKind:
    CharLiteralExpected(Token)
    ExprExpected(Token)
    IdentExpected(Token)
    IntLiteralExpected(Token)
    InvalidIntLiteral(Token)
    PatternExpected(Token)
    ParamExpected(Token)
    TypeExpected(Token?)
    UnitNotAllowedInGeneric
    UnexpectedEOF
    UnexpectedFnDecl(FnDecl)
    UnexpectedToken(Token)
end

struct ParseError:
    kind ParseErrorKind
    meta Meta
end

enum LiteralKind:
    ArrayLiteral(Vector<Expr>)
    IntLiteral(Int)
    BoolLiteral(Bool)
    StrLiteral(Str, Str)
    CharLiteral(Char, Str)
    UnitLiteral
end

struct Literal:
    kind LiteralKind
    meta Meta
end

struct Call:
    target Expr
    args Vector<Expr>
    propagate_error Bool
    meta Meta
end

struct Ident:
    name Str
    meta Meta
end

struct FStr:
    exprs Vector<Expr>
    meta Meta
end

enum BinaryExprKind:
    Add
    And
    Div
    Equal
    GreaterThan
    GreaterThanOrEqual
    LessThan
    LessThanOrEqual
    Mod
    Mul
    NotEqual
    Or
    Sub
end

struct BinaryExpr:
    lhs Expr
    rhs Expr
    kind BinaryExprKind
    meta Meta
end

enum UnaryExprKind:
    Neg
    Not
end

struct UnaryExpr:
    expr Expr
    kind UnaryExprKind
    meta Meta
end

struct Assignment:
    lhs Expr
    rhs Expr
    meta Meta
end

struct Let:
    ident Ident
    is_mut Bool
    type_ Type
    expr Expr
    meta Meta
end

struct If:
    cond Expr
    then_block Block
    else_block Block?
    meta Meta
end

struct IfLet:
    expr Expr
    pattern Pattern
    then_block Block
    else_block Block?
    meta Meta
end

struct Loop:
    body Block
    meta Meta
end

struct Break:
    meta Meta
end

struct Continue:
    meta Meta
end

struct Return:
    expr Expr
    meta Meta
end

struct FieldAccess:
    target Expr
    field Name
    meta Meta
end

struct TupleAccess:
    target Expr
    index Int
    meta Meta
end

struct IndexAccess:
    target Expr
    index Expr
    meta Meta
end

struct Match:
    expr Expr
    arms Vector<MatchArm>
    meta Meta
end

struct MatchArm:
    pattern Pattern
    block Block
    -- todo: Sometimes it's called `body` and sometimes `block`.
    meta Meta
end

struct Pattern:
    kind PatternKind
    meta Meta
end

struct Range:
    start Literal
    end_ Literal
    end_is_exclusive Bool
    meta Meta
end

enum PatternKind:
    EnumVariant(FQN, Vector<Pattern>)
    Ident(Ident)
    FQN(FQN)
    Literal(Literal)
    Or(Vector<Pattern>)
    Range(Range)
    Struct(FQN, Vector<(Ident, Pattern)>)
    Tuple(Vector<Pattern>)
    Wildcard
end

struct StructInst:
    fqn FQN
    fields Vector<(Ident, Expr)>
    meta Meta
end

struct Closure:
    params Vector<Param>
    return_type Type
    body Block
    meta Meta
end

struct TerminatorExpr:
    expr Expr
    meta Meta
end

enum ExprKind:
    Assignment(Assignment)
    BinaryExpr(BinaryExpr)
    Break(Break)
    Call(Call)
    Closure(Closure)
    Continue(Continue)
    FQN(FQN)
    FStr(FStr)
    FieldAccess(FieldAccess)
    Ident(Ident)
    IndexAccess(IndexAccess)
    If(If)
    IfLet(IfLet)
    Let(Let)
    Literal(Literal)
    Loop(Loop)
    Match(Match)
    Paren(Expr)
    Return(Return)
    StructInst(StructInst)
    TerminatorExpr(TerminatorExpr)
    Tuple(Vector<Expr>) -- todo: I think this should be LiteralKind::Tuple
    TupleAccess(TupleAccess)
    UnaryExpr(UnaryExpr)
end

struct Expr:
    kind ExprKind
    meta Meta
end

struct GenericArg:
    type_ Type
    trait_bounds Vector<FQN>?
    default Type?
    meta Meta
end

struct Name:
    ident Ident
    generics Vector<GenericArg>?
    meta Meta
end

struct FQN:
    --- A fully qualified name is a series of names, separated by `::`.
        A name can have generic arguments.
        Example: `module::Enum::Variant<T>`.
    ---
    names Vector<Name>
    meta Meta
end

struct FnType:
    param_types Vector<Type>
    return_type Type
    meta Meta
end

enum TypeKind:
    FQN(FQN)
    Fn(FnType)
    Infer
    Self
    Tuple(Vector<Type>)
    Unit
end

struct Type:
    kind TypeKind
    meta Meta
end

struct Param:
    ident Ident
    type_ Type
    is_mut Bool
    meta Meta
end

struct FnDecl:
    ident Ident
    generics Vector<GenericArg>?
    params Vector<Param>
    return_type Type
    meta Meta
end

struct Fn:
    decl FnDecl
    body Block
    meta Meta
end

struct Block:
    items Vector<BlockItem>
    meta Meta
end

struct Trait:
    name Name
    trait_bounds Vector<FQN>?
    fn_decls Vector<FnDecl>
    fn_impls Vector<Fn>
    meta Meta
end

enum EnumVariantKind:
    Tuple(Vector<Type>)
    Unit
end

struct EnumVariant:
    ident Ident
    kind EnumVariantKind
    meta Meta
end

struct Enum:
    name Name
    variants Vector<EnumVariant>
    meta Meta
end

struct Struct:
    name Name
    fields Vector<Field>
    meta Meta
end

struct Field:
    ident Ident
    type_ Type
    meta Meta
end

struct Impl:
    -- todo (lang feat): Make `type` a reserved word for future use.
    type_ FQN
    trait_ FQN?
    fn_impls Vector<Fn>
    meta Meta
end

struct Extern:
    items Vector<ExternItem>
    meta Meta
end

enum ExternItem:
    Enum(Enum)
    ExternImpl(ExternImpl)
    ExternImplTrait(ExternImplTrait)
    FnDecl(FnDecl)
    Struct(Struct)
end

struct ExternImpl:
    type_ FQN
    fn_decls Vector<FnDecl>
    meta Meta
end

struct ExternImplTrait:
    type_ FQN
    trait_ FQN
    meta Meta
end

struct Use:
    path Vector<Ident>
    relative Bool
    wildcard Bool
    meta Meta
end

enum BlockItemKind:
    Struct(Struct)
    Enum(Enum)
    Expr(Expr)
    Fn(Fn)
    Impl(Impl)
    Trait(Trait)
end

struct BlockItem:
    kind BlockItemKind
    meta Meta
end

enum ModuleItemKind:
    Extern(Extern)
    Use(Use)
    Struct(Struct)
    Enum(Enum)
    Fn(Fn)
    Impl(Impl)
    Trait(Trait)
end

struct ModuleItem:
    kind ModuleItemKind
    meta Meta
end

struct Module:
    items Vector<ModuleItem>
    meta Meta
end

struct Id:
    --- Each item in the AST is assigned a unique ID.
    ---
    -- todo (lang-feat): This should be private.
    id Int
end

struct Meta:
    --- A unique ID for the node.
    ---
    id Id
    --- The tokens taken from the source code. These tokens never
        change even if the item is desugared.
    ---
    tokens Vector<Token>?
    --- The span of the node in the source code.
    ---
    span Span
end

impl Type:
    fn is_option_type(self) Type?
     => match self.kind:
            TypeKind::FQN(fqn) => if fqn.names.len() == 1 and fqn.names[0].ident.name == "Option"
             => match fqn.names[0].generics:
                    Some(x) => if x.len() == 1 => Some(x[0].type_) else => None
                    None => None
                end else => None
            _ => None
        end

    fn is_result_type(self) (Type, Type)?
     => match self.kind:
            TypeKind::FQN(fqn) => if fqn.names.len() == 1 and fqn.names[0].ident.name == "Result"
             => match fqn.names[0].generics:
                    Some(x) => if x.len() == 2 => Some((x[0].type_, x[1].type_)) else => None
                    None => None
                end else => None
            _ => None
        end
end

trait Visitor:
    --- Walk the AST.

        Each AST node has a corresponding `visit_` method. This method is called
        when the node is visited.

        The `walk_` method has to be called to visit the children of the node.
    ---
    fn visit_module(mut self, mut node Module) => self.walk_module(node)

    fn visit_use(mut self, mut node Use) => self.walk_use(node)

    fn visit_module_item(mut self, mut node ModuleItem) => self.walk_module_item(node)

    fn visit_extern(mut self, mut node Extern) => self.walk_extern(node)

    fn visit_extern_item(mut self, mut node ExternItem) => self.walk_extern_item(node)

    fn visit_extern_impl(mut self, mut node ExternImpl) => self.walk_extern_impl(node)

    fn visit_extern_impl_trait(mut self, mut node ExternImplTrait)
     => self.walk_extern_impl_trait(node)

    fn visit_fn(mut self, mut node Fn) => self.walk_fn(node)

    fn visit_fndecl(mut self, mut node FnDecl) => self.walk_fndecl(node)

    fn visit_struct(mut self, mut node Struct) => self.walk_struct(node)

    fn visit_enum(mut self, mut node Enum) => self.walk_enum(node)

    fn visit_trait(mut self, mut node Trait) => self.walk_trait(node)

    fn visit_impl(mut self, mut node Impl) => self.walk_impl(node)

    fn visit_block(mut self, mut node Block) => self.walk_block(node)

    fn visit_expr(mut self, mut node Expr) => self.walk_expr(node)

    fn visit_match_arm(mut self, mut node MatchArm) => self.walk_match_arm(node)

    fn visit_pattern(mut self, mut node Pattern) => self.walk_pattern(node)

    fn walk_module(mut self, node Module)
     => node.items.iter().for_each(fn(item ModuleItem) => self.visit_module_item(item))

    fn walk_use(mut self, node Use):
    end

    fn walk_module_item(mut self, node ModuleItem)
     => match node.kind:
            ModuleItemKind::Enum(child) => self.visit_enum(child)
            ModuleItemKind::Extern(child) => self.visit_extern(child)
            ModuleItemKind::Fn(child) => self.visit_fn(child)
            ModuleItemKind::Impl(child) => self.visit_impl(child)
            ModuleItemKind::Trait(child) => self.visit_trait(child)
            ModuleItemKind::Struct(child) => self.visit_struct(child)
            ModuleItemKind::Use(child) => self.visit_use(child)
        end

    fn walk_enum(mut self, node Enum):
    end

    fn walk_extern(mut self, node Extern)
     => node.items.iter().for_each(fn(item ExternItem) => self.visit_extern_item(item))

    fn walk_extern_item(mut self, node ExternItem)
     => match node:
            ExternItem::Enum(child) => self.visit_enum(child)
            ExternItem::ExternImpl(child) => self.visit_extern_impl(child)
            ExternItem::ExternImplTrait(child) => self.visit_extern_impl_trait(child)
            ExternItem::FnDecl(child) => self.visit_fndecl(child)
            ExternItem::Struct(child) => self.visit_struct(child)
        end

    fn walk_extern_impl(mut self, node ExternImpl)
     => node.fn_decls.iter().for_each(fn(it FnDecl) => self.visit_fndecl(it))

    fn walk_extern_impl_trait(mut self, node ExternImplTrait):
    end

    fn walk_fn(mut self, node Fn):
        self.visit_fndecl(node.decl)
        self.visit_block(node.body)
    end

    fn walk_fndecl(mut self, node FnDecl):
    end

    fn walk_block(mut self, node Block)
     => node.items.iter().for_each(fn(item BlockItem) => self.walk_block_item(item))

    fn walk_block_item(mut self, node BlockItem)
     => match node.kind:
            BlockItemKind::Enum(child) => self.visit_enum(child)
            BlockItemKind::Expr(child) => self.visit_expr(child)
            BlockItemKind::Fn(child) => self.visit_fn(child)
            BlockItemKind::Impl(child) => self.visit_impl(child)
            BlockItemKind::Trait(child) => self.visit_trait(child)
            BlockItemKind::Struct(child) => self.visit_struct(child)
        end

    fn walk_expr(mut self, node Expr)
     => match node.kind:
            ExprKind::Assignment(child):
                self.visit_expr(child.lhs)
                self.visit_expr(child.rhs)
            end
            ExprKind::BinaryExpr(child):
                self.visit_expr(child.lhs)
                self.visit_expr(child.rhs)
            end
            ExprKind::Break(child) => ()
            ExprKind::Call(child):
                self.visit_expr(child.target)
                child.args.iter().for_each(fn(it Expr) => self.visit_expr(it))
            end
            ExprKind::Closure(child) => self.visit_block(child.body)
            ExprKind::Continue(child) => ()
            ExprKind::FQN(child) => ()
            ExprKind::FStr(child) => child.exprs.iter().for_each(fn(it Expr) => self.visit_expr(it))
            ExprKind::FieldAccess(child) => self.visit_expr(child.target)
            ExprKind::Ident(child) => ()
            ExprKind::IndexAccess(child):
                self.visit_expr(child.target)
                self.visit_expr(child.index)
            end
            ExprKind::If(child):
                self.visit_expr(child.cond)
                self.visit_block(child.then_block)
                match child.else_block:
                    Some(x) => self.visit_block(x)
                    None => ()
                end
            end
            ExprKind::IfLet(child):
                self.visit_pattern(child.pattern)
                self.visit_expr(child.expr)
                self.visit_block(child.then_block)
                if let Some (x) = child.else_block => self.visit_block(x)
            end
            ExprKind::Let(child) => self.visit_expr(child.expr)
            ExprKind::Literal(child) => ()
            ExprKind::Loop(child) => self.visit_block(child.body)
            ExprKind::Match(child):
                self.visit_expr(child.expr)
                child.arms.iter().for_each(fn(it MatchArm) => self.visit_match_arm(it))
            end
            ExprKind::Paren(child) => self.visit_expr(child)
            ExprKind::Return(child) => self.visit_expr(child.expr)
            ExprKind::StructInst(child)
             => child.fields.iter().for_each(fn(it (Ident, Expr)) => self.visit_expr(it.1))
            ExprKind::TerminatorExpr(child) => self.visit_expr(child.expr)
            ExprKind::Tuple(child) => child.iter().for_each(fn(it Expr) => self.visit_expr(it))
            ExprKind::TupleAccess(child) => self.visit_expr(child.target)
            ExprKind::UnaryExpr(child) => self.visit_expr(child.expr)
        end

    fn walk_match_arm(mut self, node MatchArm):
        self.visit_pattern(node.pattern)
        self.visit_block(node.block)
    end

    fn walk_pattern(mut self, node Pattern)
     => match node.kind:
            PatternKind::EnumVariant(_, patterns)
             => patterns.iter().for_each(fn(it Pattern) => self.visit_pattern(it))
            PatternKind::Struct(_, fields)
             => fields.iter().for_each(fn(it (Ident, Pattern)) => self.visit_pattern(it.1))
            PatternKind::Or(patterns)
             => patterns.iter().for_each(fn(it Pattern) => self.visit_pattern(it))
            PatternKind::Tuple(patterns)
             => patterns.iter().for_each(fn(it Pattern) => self.visit_pattern(it))
            PatternKind::Range(_) => ()
            PatternKind::Ident(_) => ()
            PatternKind::FQN(_) => ()
            PatternKind::Literal(_) => ()
            PatternKind::Wildcard => ()
        end

    fn walk_impl(mut self, node Impl)
     => node.fn_impls.iter().for_each(fn(it Fn) => self.visit_fn(it))

    fn walk_struct(mut self, node Struct):
    end

    fn walk_trait(mut self, node Trait):
        node.fn_impls.iter().for_each(fn(it Fn) => self.visit_fn(it))
        node.fn_decls.iter().for_each(fn(it FnDecl) => self.visit_fndecl(it))
    end
end

impl Meta:
    fn from_tokens(tokens Vector<Token>) Meta:
        assert(tokens.len() > 0)
        let last = tokens.len() - 1
        -- todo (lang-feat): We should be able to just use `-1` as the end index.
        let span = tokens[0].span.combine(tokens[last].span)
        let id = Id{ id: int_next() }
        Meta{ id, tokens: Some(tokens), span }
    end

    fn from_span(span Span) Meta:
        let id = Id{ id: int_next() }
        Meta{ id, tokens: None, span }
    end

    fn last_token(self) Token?
     => match self.tokens:
            Some(x) => Some(x[x.len() - 1])
            None => None
        end

    fn first_token(self) Token?
     => match self.tokens:
            Some(x) => Some(x[0])
            None => None
        end

    fn tokens_to_str(self) Str
     => match self.tokens:
            Some(x) => " ".join(x.iter().map<Str>(fn(it Token) Str => it.to_str()))
            None => ""
        end
end

impl ToDebugStr for Meta:
    fn to_debug_str(self) Str => f"(@meta {self.id.id} {self.span})"
end

impl ToDebugStr for GenericArg:
    fn to_debug_str(self) Str:
        let trait_bounds = match self.trait_bounds:
            Some(x)
             => " ".join(x.iter().map<Str>(fn(it FQN) Str
                 => f"(@traitbound {it.to_debug_str()})"))
            None => ""
        end
        let default = match self.default:
            Some(x) => x.to_debug_str()
            None => ""
        end
        f"(@genericarg {
            self.type_.to_debug_str()
        }{" ".when(trait_bounds.len() > 0)}{trait_bounds}{" ".when(default.len() > 0)}{default})"
    end
end

impl ToDebugStr for Name:
    fn to_debug_str(self) Str:
        let generics = match self.generics:
            Some(x) => " ".join(x.iter().map<Str>(fn(it GenericArg) Str => it.to_debug_str()))
            None => ""
        end
        f"(@name {self.ident.to_debug_str()}{" ".when(generics.len() > 0)}{generics})"
    end
end

impl ToDebugStr for FQN:
    fn to_debug_str(self) Str:
        let names = " ".join(self.names.iter().map<Str>(fn(it Name) Str => it.to_debug_str()))
        f"(@fqn {names})"
    end
end

impl ToDebugStr for FnType:
    fn to_debug_str(self) Str:
        let param_types = " ".join(self.param_types.iter().map<Str>(fn(it Type) Str
         => it.to_debug_str()))
        f"(@fntype{" ".when(param_types.len() > 0)}{param_types} {self.return_type.to_debug_str()})"
    end
end

impl ToDebugStr for Type:
    fn to_debug_str(self) Str
     => match self.kind:
            TypeKind::Fn(x) => x.to_debug_str()
            TypeKind::FQN(x) => f"(@type {x.to_debug_str()})"
            TypeKind::Unit => "(@type (@unit))"
            TypeKind::Self => "(@type (@self))"
            TypeKind::Tuple(x):
                let types = " ".join(x.iter().map<Str>(fn(it Type) Str => it.to_debug_str()))
                f"(@type (@tuple{" ".when(types.len() > 0)}{types})"
            end
            TypeKind::Infer => "(@type (@infer))"
        end
end

impl ToDebugStr for Param:
    fn to_debug_str(self) Str:
        let is_mut = if self.is_mut => "mut " else => ""
        f"(@param {is_mut}{self.ident.to_debug_str()} {self.type_.to_debug_str()})"
    end
end

impl ToDebugStr for FnDecl:
    fn to_debug_str(self) Str:
        let generics = match self.generics:
            Some(x) => " ".join(x.iter().map<Str>(fn(it GenericArg) Str => it.to_debug_str()))
            None => ""
        end
        let params = " ".join(self.params.iter().map<Str>(fn(it Param) Str => it.to_debug_str()))
        let return_type = self.return_type.to_debug_str()
        f"(@fndecl {self.ident.to_debug_str()}"
            + f"{" ".when(generics.len() > 0)}{generics}"
            + f"{" ".when(params.len() > 0)}{params} {return_type})"
    end
end

impl ToDebugStr for Trait:
    fn to_debug_str(self) Str:
        let trait_bounds = match self.trait_bounds:
            Some(x)
             => " ".join(x.iter().map<Str>(fn(it FQN) Str
                 => f"(@traitbound {it.to_debug_str()})"))
            None => ""
        end
        let fn_decls = " ".join(self.fn_decls.iter().map<Str>(fn(it FnDecl) Str
         => it.to_debug_str()))
        let fn_impls = " ".join(self.fn_impls.iter().map<Str>(fn(it Fn) Str => it.to_debug_str()))
        f"(@trait {self.name.to_debug_str()}"
            + f"{" ".when(trait_bounds.len() > 0)}{trait_bounds}"
            + f"{" ".when(fn_decls.len() > 0)}"
            + f"{fn_decls}{" ".when(fn_impls.len() > 0)}{fn_impls})"
    end
end

impl ToDebugStr for EnumVariantKind:
    fn to_debug_str(self) Str
     => match self:
            EnumVariantKind::Tuple(x):
                let types = " ".join(x.iter().map<Str>(fn(it Type) Str => it.to_debug_str()))
                f"(@tuple {types})"
            end
            EnumVariantKind::Unit => "(@unit)"
        end
end

impl ToDebugStr for EnumVariant:
    fn to_debug_str(self) Str:
        let kind = self.kind.to_debug_str()
        f"(@variant {self.ident.to_debug_str()} {kind})"
    end
end

impl ToDebugStr for Enum:
    fn to_debug_str(self) Str:
        let variants = " ".join(self.variants.iter().map<Str>(fn(it EnumVariant) Str
         => it.to_debug_str()))
        f"(@enum {self.name.to_debug_str()}{" ".when(variants.len() > 0)}{variants})"
    end
end

impl ToDebugStr for Field:
    fn to_debug_str(self) Str => f"(@field {self.ident.to_debug_str()} {self.type_.to_debug_str()})"
end

impl ToDebugStr for Struct:
    fn to_debug_str(self) Str:
        let fields = " ".join(self.fields.iter().map<Str>(fn(it Field) Str => it.to_debug_str()))
        f"(@struct {self.name.to_debug_str()}{" ".when(fields.len() > 0)}{fields})"
    end
end

impl ToDebugStr for Impl:
    fn to_debug_str(self) Str:
        let trait_ = match self.trait_:
            Some(x) => f"{x.to_debug_str()} "
            None => ""
        end
        let fn_impls = " ".join(self.fn_impls.iter().map<Str>(fn(it Fn) Str => it.to_debug_str()))
        f"(@impl {trait_}{self.type_.to_debug_str()}{" ".when(fn_impls.len() > 0)}{fn_impls})"
    end
end

impl ToDebugStr for Extern:
    fn to_debug_str(self) Str:
        let items = " ".join(self.items.iter().map<Str>(fn(it ExternItem) Str => it.to_debug_str()))
        f"(@extern{" ".when(items.len() > 0)}{items})"
    end
end

impl ToDebugStr for Use:
    fn to_debug_str(self) Str:
        let path = " ".join(self.path.iter().map<Str>(fn(it Ident) Str => it.to_debug_str()))
        f"(@use {"relative ".when(self.relative)}{"wildcard ".when(self.wildcard)}{path})"
    end
end

impl ToDebugStr for ExternImpl:
    fn to_debug_str(self) Str:
        let fn_decls = " ".join(self.fn_decls.iter().map<Str>(fn(it FnDecl) Str
         => it.to_debug_str()))
        f"(@externimpl {self.type_.to_debug_str()}{" ".when(fn_decls.len() > 0)}{fn_decls})"
    end
end

impl ToDebugStr for ExternImplTrait:
    fn to_debug_str(self) Str
     => f"(@externimpltrait {self.trait_.to_debug_str()} {self.type_.to_debug_str()})"
end

impl ToDebugStr for ExternItem:
    fn to_debug_str(self) Str
     => match self:
            ExternItem::Enum(x) => x.to_debug_str()
            ExternItem::FnDecl(x) => x.to_debug_str()
            ExternItem::ExternImpl(x) => x.to_debug_str()
            ExternItem::ExternImplTrait(x) => x.to_debug_str()
            ExternItem::Struct(x) => x.to_debug_str()
        end
end

impl ToDebugStr for ModuleItem:
    fn to_debug_str(self) Str
     => match self.kind:
            ModuleItemKind::Enum(x) => x.to_debug_str()
            ModuleItemKind::Extern(x) => x.to_debug_str()
            ModuleItemKind::Fn(x) => x.to_debug_str()
            ModuleItemKind::Impl(x) => x.to_debug_str()
            ModuleItemKind::Trait(x) => x.to_debug_str()
            ModuleItemKind::Struct(x) => x.to_debug_str()
            ModuleItemKind::Use(x) => x.to_debug_str()
        end
end

impl ToDebugStr for Module:
    fn to_debug_str(self) Str:
        let items = " ".join(self.items.iter().map<Str>(fn(it ModuleItem) Str => it.to_debug_str()))
        f"(@mod{" ".when(items.len() > 0)}{items})"
    end
end

impl ToDebugStr for BlockItem:
    fn to_debug_str(self) Str
     => match self.kind:
            BlockItemKind::Enum(x) => x.to_debug_str()
            BlockItemKind::Expr(x) => x.to_debug_str()
            BlockItemKind::Fn(x) => x.to_debug_str()
            BlockItemKind::Impl(x) => x.to_debug_str()
            BlockItemKind::Trait(x) => x.to_debug_str()
            BlockItemKind::Struct(x) => x.to_debug_str()
        end
end

impl ToDebugStr for Fn:
    fn to_debug_str(self) Str:
        let body = self.body.to_debug_str()
        let decl = self.decl.to_debug_str()
        f"(@fn {decl} {body})"
    end
end

impl ToDebugStr for Block:
    fn to_debug_str(self) Str:
        if self.items.len() == 0 => return "(@block)"
        let body = " ".join(self.items.iter().map<Str>(fn(it BlockItem) Str => it.to_debug_str()))
        f"(@block {body})"
    end
end

impl ToDebugStr for ParseErrorKind:
    fn to_debug_str(self) Str
     => match self:
            ParseErrorKind::CharLiteralExpected(token)
             => f"(@error char literal expected at {token.span})"
            ParseErrorKind::ExprExpected(token) => f"(@error expr expected at {token.span})"
            ParseErrorKind::IdentExpected(token) => f"(@error ident expected at {token.span})"
            ParseErrorKind::IntLiteralExpected(token)
             => f"(@error int literal expected at {token.span})"
            ParseErrorKind::InvalidIntLiteral(token)
             => f"(@error invalid int literal at {token.span})"
            ParseErrorKind::ParamExpected(token) => f"(@error param expected at {token.span})"
            ParseErrorKind::PatternExpected(token) => f"(@error pattern expected at {token.span})"
            ParseErrorKind::TypeExpected(token):
                let span_str = match token:
                    Some(x) => x.span.to_str()
                    -- x => "ooo"
                    None => "EOF"
                end
                f"(@error type expected at {span_str})"
            end
            ParseErrorKind::UnitNotAllowedInGeneric => "(@error unit not allowed in generic)"
            ParseErrorKind::UnexpectedEOF => "(@error eof)"
            ParseErrorKind::UnexpectedFnDecl(decl)
             => f"(@error unexpected fn decl `{decl.ident}` at {decl.meta.span})"
            ParseErrorKind::UnexpectedToken(token)
             => f"(@error unexpected token `{token}` at {token.span})"
        end
end

impl ToDebugStr for Literal:
    fn to_debug_str(self) Str:
        let lit = match self.kind:
            LiteralKind::ArrayLiteral(exprs):
                let exprs_str = " ".join(exprs.iter().map<Str>(fn(it Expr) Str
                 => it.to_debug_str()))
                f"(@array{" ".when(exprs_str.len() > 0)}{exprs_str})"
            end
            LiteralKind::BoolLiteral(value) => f"(@bool {value})"
            LiteralKind::CharLiteral(value, _) => f"(@char {value})"
            LiteralKind::IntLiteral(value) => f"(@int {value})"
            LiteralKind::StrLiteral(value, _)
             => f"(@str{" ".when(value.len() > 0)}{value.replace("\n", "\\n")})"
            LiteralKind::UnitLiteral => "(@unit)"
        end
        f"{lit}"
    end
end

impl ToDebugStr for Call:
    fn to_debug_str(self) Str:
        let args = " ".join(self.args.iter().map<Str>(fn(it Expr) Str => it.to_debug_str()))
        f"(@call {
            self.target.to_debug_str()
        }{" ".when(args.len() > 0)}{args}{" (@propagate)".when(self.propagate_error)})"
    end
end

impl PartialEq for Ident:
    fn eq(self, other Ident) Bool => self.name == other.name
end

impl ToDebugStr for Ident:
    fn to_debug_str(self) Str => f"(@ident {self.name})"
end

impl ToStr for Ident:
    fn to_str(self) Str => self.name
end

impl ToDebugStr for FStr:
    fn to_debug_str(self) Str:
        let exprs = " ".join(self.exprs.iter().map<Str>(fn(it Expr) Str => it.to_debug_str()))
        f"(@fstr{" ".when(exprs.len() > 0)}{exprs})"
    end
end

impl ToDebugStr for BinaryExpr:
    fn to_debug_str(self) Str:
        let kind = match self.kind:
            BinaryExprKind::Add => "+"
            BinaryExprKind::And => "and"
            BinaryExprKind::Div => "/"
            BinaryExprKind::Equal => "=="
            BinaryExprKind::GreaterThan => ">"
            BinaryExprKind::GreaterThanOrEqual => ">="
            BinaryExprKind::LessThan => "<"
            BinaryExprKind::LessThanOrEqual => "<="
            BinaryExprKind::Mod => "%"
            BinaryExprKind::Mul => "*"
            BinaryExprKind::NotEqual => "!="
            BinaryExprKind::Or => "or"
            BinaryExprKind::Sub => "-"
        end
        f"(@binexpr {kind} {self.lhs.to_debug_str()} {self.rhs.to_debug_str()})"
    end
end

impl ToDebugStr for Assignment:
    fn to_debug_str(self) Str => f"(@assign {self.lhs.to_debug_str()} {self.rhs.to_debug_str()})"
end

impl ToDebugStr for Let:
    fn to_debug_str(self) Str:
        let name = if self.is_mut => "mut" else => "let"
        f"(@{
            name
        } {self.ident.to_debug_str()} {self.type_.to_debug_str()} {self.expr.to_debug_str()})"
    end
end

impl ToDebugStr for If:
    fn to_debug_str(self) Str:
        let else_block = match self.else_block:
            Some(x) => f" {x.to_debug_str()}"
            None => ""
        end
        f"(@if {self.cond.to_debug_str()} {self.then_block.to_debug_str()}{else_block})"
    end
end

impl ToDebugStr for IfLet:
    fn to_debug_str(self) Str:
        let else_block = match self.else_block:
            Some(x) => f" {x.to_debug_str()}"
            None => ""
        end
        f"(@iflet {
            self.pattern.to_debug_str()
        } {self.expr.to_debug_str()} {self.then_block.to_debug_str()}{else_block})"
    end
end

impl ToDebugStr for UnaryExpr:
    fn to_debug_str(self) Str:
        let kind = match self.kind:
            UnaryExprKind::Neg => "-"
            UnaryExprKind::Not => "not"
        end
        f"(@unexpr {kind} {self.expr.to_debug_str()})"
    end
end

impl ToDebugStr for Loop:
    fn to_debug_str(self) Str => f"(@loop {self.body.to_debug_str()})"
end

impl ToDebugStr for Break:
    fn to_debug_str(self) Str => "(@break)"
end

impl ToDebugStr for Continue:
    fn to_debug_str(self) Str => "(@continue)"
end

impl ToDebugStr for Return:
    fn to_debug_str(self) Str => f"(@return {self.expr.to_debug_str()})"
end

impl ToDebugStr for FieldAccess:
    fn to_debug_str(self) Str
     => f"(@fieldaccess {self.target.to_debug_str()} {self.field.to_debug_str()})"
end

impl ToDebugStr for TupleAccess:
    fn to_debug_str(self) Str => f"(@tupleaccess {self.target.to_debug_str()} {self.index})"
end

impl ToDebugStr for IndexAccess:
    fn to_debug_str(self) Str
     => f"(@indexaccess {self.target.to_debug_str()} {self.index.to_debug_str()})"
end

impl ToDebugStr for MatchArm:
    fn to_debug_str(self) Str
     => f"(@matcharm {self.pattern.to_debug_str()} {self.block.to_debug_str()})"
end

impl ToDebugStr for Range:
    fn to_debug_str(self) Str:
        let sign = if self.end_is_exclusive => "..<" else => ".."
        f"(@range {self.start.to_debug_str()} {sign} {self.end_.to_debug_str()})"
    end
end

impl ToDebugStr for PatternKind:
    fn to_debug_str(self) Str
     => match self:
            PatternKind::EnumVariant(fqn, patterns):
                let patterns_str = " ".join(patterns.iter().map<Str>(fn(it Pattern) Str
                 => it.to_debug_str()))
                f"(@enumvariant {
                    fqn.to_debug_str()
                }{" ".when(patterns_str.len() > 0)}{patterns_str})"
            end
            PatternKind::Struct(fqn, fields):
                let fields_str = " ".join(fields.iter().map<Str>(fn(it (Ident, Pattern)) Str
                 => f"(@field {it.0.to_debug_str()} {it.1.to_debug_str()})"))
                f"(@struct {fqn.to_debug_str()}{" ".when(fields_str.len() > 0)}{fields_str})"
            end
            PatternKind::Or(patterns):
                let patterns_str = " ".join(patterns.iter().map<Str>(fn(it Pattern) Str
                 => it.to_debug_str()))
                f"(@or {patterns_str})"
            end
            PatternKind::Ident(x) => x.to_debug_str()
            PatternKind::FQN(x) => x.to_debug_str()
            PatternKind::Literal(x) => f"(@literal {x.to_debug_str()})"
            PatternKind::Range(x) => x.to_debug_str()
            PatternKind::Tuple(x):
                let patterns = " ".join(x.iter().map<Str>(fn(it Pattern) Str => it.to_debug_str()))
                f"(@tuple{" ".when(patterns.len() > 0)}{patterns})"
            end
            PatternKind::Wildcard => "(@wildcard)"
        end
end

impl ToDebugStr for Pattern:
    fn to_debug_str(self) Str => f"(@pattern {self.kind.to_debug_str()})"
end

impl ToDebugStr for Match:
    fn to_debug_str(self) Str:
        let arms = " ".join(self.arms.iter().map<Str>(fn(it MatchArm) Str => it.to_debug_str()))
        f"(@match {self.expr.to_debug_str()}{" ".when(arms.len() > 0)}{arms})"
    end
end

impl ToDebugStr for StructInst:
    fn to_debug_str(self) Str:
        let fields = " ".join(self.fields.iter().map<Str>(fn(it (Ident, Expr)) Str
         => f"(@field {it.0.to_debug_str()} {it.1.to_debug_str()})"))
        f"(@structinst {self.fqn.to_debug_str()}{" ".when(fields.len() > 0)}{fields})"
    end
end

impl ToDebugStr for Closure:
    fn to_debug_str(self) Str:
        let params = " ".join(self.params.iter().map<Str>(fn(it Param) Str => it.to_debug_str()))
        f"(@closure{
            " ".when(params.len() > 0)
        }{params} {self.return_type.to_debug_str()} {self.body.to_debug_str()})"
    end
end

impl ToDebugStr for TerminatorExpr:
    fn to_debug_str(self) Str => f"(@terminatorexpr {self.expr.to_debug_str()})"
end

impl ToDebugStr for ExprKind:
    fn to_debug_str(self) Str
     => match self:
            ExprKind::Assignment(value) => value.to_debug_str()
            ExprKind::BinaryExpr(value) => value.to_debug_str()
            ExprKind::Break(value) => value.to_debug_str()
            ExprKind::Call(value) => value.to_debug_str()
            ExprKind::Closure(value) => value.to_debug_str()
            ExprKind::Continue(value) => value.to_debug_str()
            ExprKind::FieldAccess(value) => value.to_debug_str()
            ExprKind::FStr(value) => value.to_debug_str()
            ExprKind::FQN(value) => value.to_debug_str()
            ExprKind::Ident(value) => value.to_debug_str()
            ExprKind::IndexAccess(value) => value.to_debug_str()
            ExprKind::If(value) => value.to_debug_str()
            ExprKind::IfLet(value) => value.to_debug_str()
            ExprKind::Let(value) => value.to_debug_str()
            ExprKind::Literal(value) => value.to_debug_str()
            ExprKind::Loop(value) => value.to_debug_str()
            ExprKind::Match(value) => value.to_debug_str()
            ExprKind::Paren(value) => f"(@paren {value.to_debug_str()})"
            ExprKind::Return(value) => value.to_debug_str()
            ExprKind::StructInst(value) => value.to_debug_str()
            ExprKind::TerminatorExpr(value) => value.to_debug_str()
            ExprKind::Tuple(value):
                let exprs = " ".join(value.iter().map<Str>(fn(it Expr) Str => it.to_debug_str()))
                f"(@tuple{" ".when(exprs.len() > 0)}{exprs})"
            end
            ExprKind::TupleAccess(value) => value.to_debug_str()
            ExprKind::UnaryExpr(value) => value.to_debug_str()
        end
end

impl ToDebugStr for Expr:
    fn to_debug_str(self) Str => self.kind.to_debug_str()
end

impl ToDebugStr for ParseError:
    fn to_debug_str(self) Str => self.kind.to_debug_str()
end

impl ToStr for ParseError:
    fn to_str(self) Str => self.to_debug_str()
end
