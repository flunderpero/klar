use .lexer.Lexer
use .lexer.TokenKind
use .lexer.Token
use .ast.Module
use .parser.Parser
use .parser.TokenIter
use .ast.ParseErrorKind

enum DebugLevel:
    Off
    Debug
    Warn
end

impl PartialEq for DebugLevel:
    fn eq(self, other DebugLevel) Bool:
        match self:
            DebugLevel::Off => match other:
                DebugLevel::Off => true
                _ => false
            end
            DebugLevel::Debug => match other:
                DebugLevel::Debug => true
                _ => false
            end
            DebugLevel::Warn => match other:
                DebugLevel::Warn => true
                _ => false
            end
        end
    end
end

fn lex(src Str, file Str, debug_level DebugLevel) Vector<Token>:
    let tokens = Lexer.lex(src, file).collect()
    let lex_errors = tokens.iter().filter(
        fn(token Token) Bool:
            match token.kind:
                TokenKind::LexError(_) => true
                _ => false
            end
        end
    ).collect()
    if debug_level == DebugLevel::Debug:
        print("Tokens:")
        let iter = tokens.iter()
        loop:
            match iter.next():
                Some<Token>(t) => print(t)
                None => break
            end
        end
    end
    if debug_level == DebugLevel::Warn or debug_level == DebugLevel::Debug:
        if lex_errors.len() > 0:
            print("Lex errors:")
            let iter = lex_errors.iter()
            loop:
                match iter.next():
                    Some<Token>(t) => print(t)
                    None => break
                end
            end
        end
    end
    tokens
end

fn parse(tokens Vector<Token>) Module throws ParseErrorKind:
    Parser.new(TokenIter.new(tokens)).parse_module()
end

fn main():
    if env.args.len() < 4:
        print("Usage: klarc <src> <dst>")
        exit(1)
        return ()
    end
    -- todo (lang-feat) We should be able to replace this with a simple block instead of an IIFE.
    let debug_level = (fn () DebugLevel:
        if env.args.iter().any(fn(s Str) Bool => s == "--debug") => return DebugLevel::Debug
        else => if env.args.iter().any(fn(s Str) Bool => s == "--warn") => return DebugLevel::Warn
        DebugLevel::Off
    end)()
    let src_file = env.args[2]
    let dst_file = env.args[3]
    let src_read = File.at(src_file).read_str()
    if let Error(error) = src_read:
        print(f"Error reading file {src_file}: {error}")
        exit(2)
        return ()
    end
    let src = src_read.unwrap()
    let tokens = lex(src, src_file, debug_level)
    match parse(tokens):
        Ok<Module>(module) => print(module.to_debug_str_multiline())
        Error<(), ParseErrorKind>(error):
            print(error.to_debug_str())
            exit(3)
        end
    end
end
