struct Lexer:
    file Str
    src Str
    iter PeekableIterator<Char>
end

impl Lexer:
    fn lex(src Str, file Str) Iterator<Token>:
        let iter = PeekableIterator::new(src.iter())
        Lexer{file, src, iter}
    end

    fn span(self) Span:
        Span{file: self.file, src: self.src, from: self.iter.idx, to: self.iter.idx}
    end
end

impl Iterator<Token> for Lexer:
    fn next(mut self) Token?:
        let next = match self.iter.next():
            Some<Char>(c) => c
            None => return None
        end
        let span = self.span()
        match next:
            ' ' | '\n' | '\t' | '\r' => Token{kind: WhiteSpace(next), span}
            '-' =>
                match self.iter.peek():
                    Some<Char>('-') => self.match_comment()
                    Some<Char>('0'..'9') => self.match_int_literal(next, span)
                    _ => Token{kind: Minus, span: span.combine(self.span())}
                end
            '(' => Token{kind: LParen, span}
            ')' => Token{kind: RParen, span}
            '{' => Token{kind: LBrace, span}
            '}' => Token{kind: RBrace, span}
            '[' => Token{kind: LBracket, span}
            ']' => Token{kind: RBracket, span}
            ',' => Token{kind: Comma, span}
            '+' => Token{kind: Plus, span}
            '*' => Token{kind: Star, span}
            '/' => Token{kind: Slash, span}
            '?' => Token{kind: QMark, span}
            '|' => Token{kind: Pipe, span}
            ';' => Token{kind: Semicolon, span}
            '.' =>
                match self.iter.peek():
                    Some<Char>('.'):
                        self.iter.next()
                        match self.iter.peek():
                            Some<Char>('<'):
                                self.iter.next()
                                Token{kind: DotDotLessThan, span: span.combine(self.span())}
                            end
                            _ => Token{kind: DotDot, span: span.combine(self.span())}
                        end
                    end
                    _ => Token{kind: Dot, span}
                end
            ':' => 
                match self.iter.peek():
                    Some<Char>(':'):
                        self.iter.next()
                        Token{kind: DoubleColon, span: span.combine(self.span())}
                    end
                    _ => Token{kind: Colon, span}
                end
            '!' => 
                match self.iter.peek():
                    Some<Char>('='):
                        self.iter.next()
                        Token{kind: NotEqual, span: span.combine(self.span())}
                    end
                    _ => Token{kind: Exclamation, span}
                end
            '=' => 
                match self.iter.peek():
                    Some<Char>('='):
                        self.iter.next()
                        Token{kind: DoubleEqual, span: span.combine(self.span())}
                    end
                    Some<Char>('>'):
                        self.iter.next()
                        Token{kind: FatArrow, span: span.combine(self.span())}
                    end
                    _ => Token{kind: Equal, span}
                end
            '<' =>
                match self.iter.peek():
                    Some<Char>('='):
                        self.iter.next()
                        Token{kind: LessThanOrEqual, span: span.combine(self.span())}
                    end
                    _ => Token{kind: LessThan, span}
                end
            '>' =>
                match self.iter.peek():
                    Some<Char>('='):
                        self.iter.next()
                        Token{kind: GreaterThanOrEqual, span: span.combine(self.span())}
                    end
                    _ => Token{kind: GreaterThan, span}
                end
            '0'..'9' => self.match_int_literal(next, span)
            '"' => self.match_string(false, self.span())
            '\'' => self.match_char()
            'a'..'z' | 'A'..'Z' | '_':
                if next == 'f':
                    match self.iter.peek():
                        Some<Char>('"'):
                            let span = self.span()
                            self.iter.next()
                            return self.match_string(true, span)
                        end
                        _ => ()
                    end
                end
                mut ident = "".push_char(next)
                loop:
                    match self.iter.peek():
                        Some<Char>('a'..'z' | 'A'..'Z' | '0'..'9' | '_'):
                            ident.push_char(self.iter.next().unwrap())
                        end
                        _ => break
                    end
                end
                let ident_span = span.combine(self.span())
                match ident:
                    -- todo (lang-feat): We should be able to generate this code automatically.
                    "and" => Token{kind: And, span: ident_span}
                    "break" => Token{kind: Break, span: ident_span}
                    "continue" => Token{kind: Continue, span: ident_span}
                    "else" => Token{kind: Else, span: ident_span}
                    "end" => Token{kind: End, span: ident_span}
                    "enum" => Token{kind: Enum, span: ident_span}
                    "extern" => Token{kind: Extern, span: ident_span}
                    "false" => Token{kind: BoolLiteral(false), span: ident_span}
                    "fn" => Token{kind: Fn, span: ident_span}
                    "for" => Token{kind: For, span: ident_span}
                    "if" => Token{kind: If, span: ident_span}
                    "impl" => Token{kind: Impl, span: ident_span}
                    "let" => Token{kind: Let, span: ident_span}
                    "loop" => Token{kind: Loop, span: ident_span}
                    "match" => Token{kind: Match, span: ident_span}
                    "mut" => Token{kind: Mut, span: ident_span}
                    "not" => Token{kind: Not, span: ident_span}
                    "or" => Token{kind: Or, span: ident_span}
                    "return" => Token{kind: Return, span: ident_span}
                    "struct" => Token{kind: Struct, span: ident_span}
                    "throws" => Token{kind: Throws, span: ident_span}
                    "trait" => Token{kind: Trait, span: ident_span}
                    "true" => Token{kind: BoolLiteral(true), span: ident_span}
                    "use" => Token{kind: Use, span: ident_span}
                    "_" => Token{kind: Underscore, span: ident_span}
                    _ => Token{kind: Ident(ident), span: ident_span}
                end
            end
            _ => Token{kind: LexError(f"unexpected character: {next}"), span}
        end
    end

    fn match_int_literal(mut self, first Char, span Span) Token:
        mut num = "".push_char(first)
        loop:
            match self.iter.peek():
                Some<Char>('0'..'9') => num.push_char(self.iter.next().unwrap())
                _ => break
            end
        end
        Token{kind: IntLiteral(num), span}
    end

    fn match_char(mut self) Token:
        let span = self.span()
        let c = match self.iter.next():
            Some('\\') => 
                match self.match_escape_sequence(self.iter.next()):
                    Error(err):
                        -- Error recovery: consume until we find a closing single quote
                        -- or a new line.
                        loop:
                            match self.iter.next():
                                Some('\'' | '\n') | None => break
                                _ => ()
                            end
                        end
                        return Token{kind: LexError(err.to_str()), span}
                    end
                    Ok<Char>(c) => c
                end
            Some('\'') => return Token{kind: LexError("empty character literal"), span: self.span()}
            Some(c) => c
            None => return Token{kind: LexError("unexpected end of file"), span: self.span()}
        end
        match self.iter.next():
            Some<Char>('\'') => ()
            _ => return Token{kind: LexError("expected closing '"), span: self.span()}
        end
        Token{kind: CharLiteral(c), span: span.combine(self.span())}
    end

    fn match_string(mut self, is_fstr Bool, span Span) Token:
        mut s = ""
        let start_span = self.span()
        mut fstr_items = Vector<FStrItem>::new()
        mut quotes = ""
        let required_closing_quotes = match self.iter.peek():
            Some<Char>('"'):
                self.iter.next()
                match self.iter.peek():
                    Some<Char>('"'):
                        self.iter.next()
                        3
                    end
                    _ => 0 -- This is simply an empty string.
                end
            end
            _ => 1
        end
        let multi_line = required_closing_quotes == 3
        mut span = self.span()
        span.from = span.from + 1
        loop:
            if quotes.len() == required_closing_quotes:
                break
            end
            match self.iter.next():
                Some<Char>('"'):
                    quotes.push_char('"')
                    continue
                end
                Some<Char>('\\') => 
                    match self.match_escape_sequence(self.iter.next()):
                        Error(err) => return Token{kind: LexError(err.to_str()), span}
                        Ok<Char>(c) => s.push_char(c)
                    end
                Some<Char>('{'):
                    if not is_fstr:
                        s.push_char('{')
                        continue
                    end
                    if s.len() > 0:
                        span = span.combine(self.span())
                        span.to = span.to - 1
                        fstr_items.push(FStrStrItem(s, span))
                        span = self.span()
                        s = ""
                    end
                    mut item_tokens = Vector<Token>::new()
                    loop:
                        match self.iter.peek():
                            Some<Char>('}'): 
                                self.iter.next()
                                break
                            end
                            None => return Token{kind: LexError("unexpected end of file"), span: self.span()}
                            _ => item_tokens.push(self.next().unwrap())
                        end
                    end
                    fstr_items.push(FStrTokensItem(item_tokens, span.combine(self.span())))
                    span = self.span()
                    span.from = span.from + 1
                end
                Some<Char>('\n') => 
                    if multi_line => s.push_char('\n')
                    else => return Token{kind: LexError("unexpected end of line"), span: self.span()}
                Some<Char>(c) => s.push_char(c)
                None => return Token{kind: LexError("unexpected end of file"), span: self.span()}
            end
            quotes = ""
        end
        let kind = if is_fstr:
            if s.len() > 0:
                span = span.combine(self.span())
                span.to = span.to - quotes.len()
                fstr_items.push(FStrStrItem(s, span))
            end
            FStr(fstr_items, multi_line)
        else => StrLiteral(s, multi_line)
        Token{kind, span: start_span.combine(self.span())}
    end

    fn match_comment(mut self) Token:
        let span = self.span()
        self.iter.next()
        -- Single- or multi-line comment.
        mut comment = "--"
        match self.iter.next():
            Some<Char>('-'):
                -- Multi-line comment.
                comment.push_char('-')
                mut num_of_dashes = 0
                loop:
                    match self.iter.next():
                        Some<Char>('-'):
                            comment.push_char('-')
                            num_of_dashes = num_of_dashes + 1
                            if num_of_dashes == 3:
                                break
                            end
                        end
                        Some<Char>(c):
                            comment.push_char(c)
                            num_of_dashes = 0
                        end
                        None => break
                    end
                end
            end
            Some<Char>(c):
                -- Single-line comment.
                comment.push_char(c)
                loop:
                    match self.iter.peek():
                        Some<Char>('\n') => break
                        Some<Char>(c): 
                            comment.push_char(c)
                            self.iter.next()
                        end
                        None => break
                    end
                end
            end
            _ => None 
        end
        Token{kind: Comment(comment), span}
    end

    fn match_escape_sequence(mut self, c Char?) Char throws:
        fn parse_hex_literal(len Int) Char throws:
            mut hex = ""
            mut idx = 0
            loop:
                if idx == len => break
                idx = idx + 1
                let digit_c = self.iter.peek()
                let digit = match digit_c:
                    Some('0'..'9' | 'a'..'f' | 'A'..'F'):
                        self.iter.next()
                        digit_c.unwrap()
                    end
                    None => return Error("unexpected end of file.")
                    _ => return Error("invalid escape sequence")
                end
                hex.push_char(digit)
            end
            let int = Int::from_str(hex, 16)!
            Char::from_int(int)!
        end

        match c:
            Some('0') => '\0'
            Some('n') => '\n'
            Some('r') => '\r'
            Some('t') => '\t'
            Some('"') => '"'
            Some('\'') => '\''
            Some('\\') => '\\'
            Some('x') => parse_hex_literal(2)!
            Some('u') => parse_hex_literal(4)!
            _ => return Error("invalid escape sequence")
        end
    end
end


struct Span:
    --- A span is a range of characters in a source file.
        `to` and `from` are inclusive.
    ---
    file Str
    src Str
    from Int
    to Int
end

impl Span:
    fn combine(self, other Span) Span:
        Span{
            file: self.file, 
            src: self.src, 
            from: if self.from < other.from => self.from else => other.from, 
            to: if self.to > other.to => self.to else => other.to
        }
    end

    fn position(self) (Int, Int):
        --- Get the line and column number of the start of the span.
        ---
        mut line = 1
        mut col = 0
        mut iter = self.src.iter()
        mut idx = 0
        loop:
            match iter.next():
                Some<Char>('\n'):
                    line = line + 1
                    col = 0
                end
                Some<Char>(c) => col = col + 1
                None => break
            end
            if idx == self.from => break
            idx = idx + 1
        end
        -- todo (lang-feat): The `return` should not be necessary here.
        return (line, col)
    end

    fn src_lines(self) Iterator<Str>:
        --- Get the lines of source code that are covered by this span.
        ---
        mut x = self.from
        loop:
            if x == 0 => break
            if self.src[x - 1] == '\n' => break
            x = x - 1
        end
        mut y = self.to
        loop:
            if y == self.src.len() => break
            if self.src[y] == '\n' => break
            y = y + 1
        end
        self.src.slice_copy(x, y).split('\n')
    end

    fn raw_src(self) Str:
        --- Return the raw source code covered by this span.
        ---
        self.src.slice_copy(self.from, self.to + 1)
    end
end

impl ToStr for Span:
    fn to_str(self) Str:
        -- First, calculate the line and column numbers.
        fn line_col(pos Int) (Int, Int):
            mut line = 1
            mut col = 0
            mut iter = self.src.iter()
            mut idx = 0
            loop:
                match iter.next():
                    Some<Char>('\n'):
                        line = line + 1
                        col = 0
                    end
                    Some<Char>(c) => col = col + 1
                    None => break
                end
                if idx == pos => break
                idx = idx + 1
            end
            return (line, col)
        end
        let from = line_col(self.from)
        if self.from == self.to => return f"{self.file}:{from.0}:{from.1}"
        let to = line_col(self.to)
        if from.0 == to.0 => return f"{self.file}:{from.0}:{from.1}-{to.1}"
        f"{self.file}:{from.0}:{from.1}-{to.0}:{to.1}"
    end
end

enum FStrItem:
    -- todo (lang-feat): We should only allow `Ident`, `Dot`, `LBracket`, and `RBracket` here.
    --                   Allowing arbitrary expressions leads to complex code. Perhaps this check
    --                   should be done in the parser instead.
    FStrTokensItem(Vector<Token>, Span)
    FStrStrItem(Str, Span)
end

use FStrItem::*

enum TokenKind:
    And
    BoolLiteral(Bool)
    Break
    CharLiteral(Char)
    Colon
    Comma
    Comment(Str)
    Continue
    Dot
    DotDot
    DotDotLessThan
    DoubleColon
    DoubleEqual
    Else
    End
    Enum
    Equal
    Exclamation
    Extern
    FatArrow
    Fn
    For
    FStr(Vector<FStrItem>, Bool)
    GreaterThan
    GreaterThanOrEqual
    Ident(Str)
    If
    Impl
    IntLiteral(Str)
    LBrace
    LBracket
    LParen
    LessThan
    LessThanOrEqual
    Let
    Loop
    Match
    Minus
    Mut
    Not
    NotEqual
    Or
    LexError(Str)
    Pipe
    Plus
    QMark
    RBrace
    RBracket
    RParen
    Return
    Semicolon
    Slash
    Star
    StrLiteral(Str, Bool)
    Struct
    Throws
    Trait
    Underscore
    Use
    WhiteSpace(Char)
end

use TokenKind::*

impl ToStr for TokenKind:
    fn to_str(self) Str:
        match self:
            -- todo (lang-feat): We should be able to generate most of this code automatically.
            And => "and"
            BoolLiteral(b) => f"BoolLiteral({b})"
            Break => "break"
            CharLiteral(c) => f"CharLiteral({c})"
            Colon => ":"
            Comma => ","
            Comment(comment) => f"Comment({comment})"
            Continue => "continue"
            Dot => "."
            DotDot => ".."
            DotDotLessThan => "..<"
            DoubleColon => "::"
            DoubleEqual => "=="
            Else => "else"
            End => "end"
            Enum => "enum"
            Equal => "="
            Exclamation => "!"
            Extern => "extern"
            FatArrow => "=>"
            Fn => "fn"
            For => "for"
            FStr(items, is_multi_line):
                let items_to_str = items<FStrItem>.iter().map<Str>(
                    fn(token FStrItem) Str:
                        match token:
                            FStrTokensItem(tokens, _) => 
                                " ".join(
                                    tokens<Token>.iter().map<Str>(
                                        fn(token Token) Str => token.to_str()
                                    )
                                )
                            FStrStrItem(s, _) => s
                        end
                    end
                )
                let items_str = ", ".join(items_to_str)
                f"FStr([{items_str}], {is_multi_line})"
            end
            GreaterThan => ">"
            GreaterThanOrEqual => ">="
            Ident(ident) => f"Ident({ident})"
            If => "if"
            Impl => "impl"
            IntLiteral(num) => f"IntLiteral({num})"
            LBrace => "{"
            LBracket => "["
            LParen => "("
            LessThan => "<"
            LessThanOrEqual => "<="
            Let => "let"
            Loop => "loop"
            Match => "match"
            Minus => "-"
            Mut => "mut"
            Not => "not"
            NotEqual => "!="
            Or => "or"
            LexError(message) => f"LexError: {message}"
            Pipe => "|"
            Plus => "+"
            QMark => "?"
            RBrace => "}"
            RBracket => "]"
            RParen => ")"
            Return => "return"
            Semicolon => ";"
            Slash => "/"
            Star => "*"
            -- todo: escape string
            StrLiteral(s, multi_line) => f"StrLiteral({s}, {multi_line})"
            Struct => "struct"
            Throws => "throws"
            Trait => "trait"
            Underscore => "_"
            Use => "use"
            WhiteSpace(ws) => f"WhiteSpace()"
        end
    end
end

impl PartialEq for TokenKind:
    fn eq(self, other TokenKind) Bool:
        -- todo: This is a hack, we should be able to derive `PartialEq`.
        self.to_str() == other.to_str()
    end
end

struct Token:
    kind TokenKind
    span Span
end

impl Token:
    fn to_src(self) Str:
        --- Convert a token back to source code. This is done using the span to 
            slice the source code.
        ---
        match self.kind:
            BoolLiteral(b) => f"{b}"
            Comment(comment) => comment
            FStr(items, is_multi_line):
                let items = items<FStrItem>.iter().map<Str>(
                    fn(token FStrItem) Str:
                        match token:
                            FStrTokensItem(tokens, _) => 
                                "".join(
                                    tokens<Token>.iter().map<Str>(
                                        fn(token Token) Str => token.to_str()
                                    )
                                )
                            FStrStrItem(s, _) => s
                        end
                    end
                )
                let items_str = "".join(items)
                if is_multi_line => f"\"\"\"{items_str}\"\"\""
                else => f"\"{items_str}\""
            end
            Ident(ident) => ident
            IntLiteral(num) => num
            StrLiteral(s, multi_line) =>
                -- We use the actual source code to get the string literal
                -- as it was written in the source code. We need to do this
                -- because we can't distinguish escape sequences from actual 
                -- characters (like `\n` and `\\n` in multi-line strings).
                self.span.src.slice_copy(self.span.from, self.span.to + 1)
            CharLiteral(c):
                -- We use the actual source code to get the char literal
                -- for the same reason as for string literals.
                self.span.src.slice_copy(self.span.from, self.span.to + 1)
            end
            WhiteSpace(ws) => f"{ws}"
            _ => self.kind.to_str()
        end
    end
end

impl ToStr for Token:
    fn to_str(self) Str:
        f"{self.kind}"
    end
end

fn to_src(tokens Vector<Token>) Str:
    --- Convert a vector of tokens back to source code.
        `lex()` and `to_src()` should be inverses of each other.
    ---
    mut s = ""
    tokens.iter().for_each(fn(token Token) => s.push(token.to_src());)
    s
end
