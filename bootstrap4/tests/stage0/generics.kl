--- expected

# compiler output:
# exit code:
0
# stderr:
# stdout:
1
2
10
11
20
21
30
31

/expected ---

struct Num:
    value Int
end

struct Container<T>:
    value T
end

impl Container<T>:

    fn new(value T) Container<T>:
        return Container<T>{ value: value }
    end

    fn get_value(self) T:
        return self.value
    end

    fn set_value(mut self, value T):
        self.value = value
        return
    end
end

struct MultiContainer<T, U>:
    value T
    other U
end

impl MultiContainer<T, U>:

    fn new(value T, other U) MultiContainer<T, U>:
        return MultiContainer<T, U>{ value: value, other: other }
    end
end

trait ComplexTrait<T, U>:
    fn get_value1(self) T
    fn get_value2(self) U
end

impl ComplexTrait<T, U> for MultiContainer<T, U>:

    fn get_value1(self) T:
        return self.value
    end

    fn get_value2(self) U:
        return self.other
    end
end

fn main():
    let c = Container<Int>{ value: 1 }
    print(c.value)
    c.set_value(c.get_value() + 1)
    print(c.get_value())
    let d = Container<Num>.new(Num{ value: 10 })
    print(d.get_value().value)
    d.set_value(Num{ value: d.get_value().value + 1 })
    print(d.get_value().value)
    let e = MultiContainer<Int, Container<Num>>{ value: 20, other: Container<Num>.new(Num{ value: 21 }) }
    print(e.value)
    print(e.other.get_value().value)
    let f = MultiContainer<Int, Container<Num>>.new(30, Container<Num>.new(Num{ value: 31 }))
    print(f.get_value1())
    print(f.get_value2().get_value().value)
    return 
end
