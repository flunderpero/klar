--- expected

# compiler output:
# exit code:
0
# stderr:
# stdout:
1
3
4
5
10
11
12
20
21
22
30
31
32
33
34

/expected ---

fn match_number(x Int) Int:
    return match x:
        0 => x + 1
        1 => x + 2
        _:
            -- The last expression in a block is the return value.
            x + 1
            x + 2
        end
    end
end

enum Color:
    Red
    Green
    Blue
end

fn match_enum(c Color) Int:
    return match c:
        Color::Red => 10
        Color::Green => 11
        Color::Blue => 12
    end
end

struct Point:
    x Int
    y Int
end

fn match_struct(p Point) Int:
    return match p:
        Point {x: 1, y: 2} => 20
        Point {x: 1, y: _} => 21
        _ => 22
    end
end

struct Line:
    start Point
    end_ Point
end

fn match_nested_struct(l Line) Int:
    return match l:
        Line {start: Point {x: 1, y: 2}, end_: Point {x: 3, y: 4}} => 30
        Line {start: Point {x: 1, y: 2}, end_: Point {x: 3, y: _}} => 31
        Line {start: Point {x: 1, y: 2}, end_: _} => 32
        Line {start: Point {x: 1, y: _}, end_: _} => 33
        _ => 34
    end
end

fn main():
    print(match_number(0))
    print(match_number(1))
    print(match_number(2))
    print(match_number(3))
    print(match_enum(Color::Red))
    print(match_enum(Color::Green))
    print(match_enum(Color::Blue))
    print(match_struct(Point {x: 1, y: 2}))
    print(match_struct(Point {x: 1, y: 3}))
    print(match_struct(Point {x: 2, y: 2}))
    print(match_nested_struct(Line {start: Point {x: 1, y: 2}, end_: Point {x: 3, y: 4}}))
    print(match_nested_struct(Line {start: Point {x: 1, y: 2}, end_: Point {x: 3, y: 5}}))
    print(match_nested_struct(Line {start: Point {x: 1, y: 2}, end_: Point {x: 9, y: 9}}))
    print(match_nested_struct(Line {start: Point {x: 1, y: 3}, end_: Point {x: 3, y: 4}}))
    print(match_nested_struct(Line {start: Point {x: 2, y: 3}, end_: Point {x: 3, y: 4}}))
end
